############################################
function _usage_
{
	echo "AA_CLASSIFY : Classification utility for AA POC"
	echo "USAGE : Train - aa_classify -b <Classifier_name> <file name> "
	echo "TEST : aa_classify -t <Model_name> <file name>"
	echo "Models will be created in ${MODEL_DIR}"
	echo "Logs will be created in ${LOG_DIR}"
}

function predict_main
{
        tmp_c_id=`echo $1 | cut -d "_"  -f 1-1`
        tmp_c_nm=` awk -F "|" -v x=$tmp_c_id '{if($1==x)print $2 }' ${CONFIG_DIR}/${CLASSIFY_LIST}`
        if [ "${tmp_c_nm}" == "" ]
        then
                echo "ERROR : Model Name Invalid. Please check Model Naem Provided."
                exit 1
        fi
        echo "Model has been built using Classifier : ${tmp_c_nm}" | tee -a ${LOG_FL}
        echo "Testing..." | tee -a ${LOG_FL}
        pr_${tmp_c_nm} $1 $2
        exit 0
}

function print_results

function pr_weka_svm {
	 p_id=`echo $$`
        m_name=`date +%Y%m%d_%H%M_`${p_id}
        #Get the name of  Meta File
	meta_fl=`echo $1 |sed 's/\.mld/\.meta/g'`
	#Create a temoporary arff file
	#Step 1 : Mask the extension 
	tmp_f_nm=`echo $2 | cut -d '.' -f 1-1`
	tmp_f_nm=`echo ${tmp_f_nm}".arff" `
	# step 2: Add the Metadata
	cat ${MODEL_DIR}/${meta_fl} > ${TMP_DIR}/${tmp_f_nm}
	# step 3: Add the Source Data and  missing class field
	awk  '{print $0",?"}' $2  >> ${TMP_DIR}/${tmp_f_nm}
	# Generate Predictions
	java -Xmx512m -cp ${SRC_DIR}/weka.jar weka.classifiers.functions.SMO -l ${MODEL_DIR}/${1} -T ${TMP_DIR}/${tmp_f_nm} -p 0  -i  \
           2>> ${LOG_FL} | tee ${TMP_DIR}/${m_name}.out
        if [ ! -f ${TMP_DIR}/${m_name}.out ]
        then
                echo "Process has Failed to Generate Predictions"
        else
                print_results ${TMP_DIR}/${m_name}.out
                #Additional Code Needs to be added to update the model name to Database
        fi
}

function extract_metadata {
        new_nm=`echo "${MODEL_DIR}/${1}" | sed 's/\.mld/\.meta/g'`
        echo $new_nm
        echo "% Meta definition Created : "`date` > ${new_nm}
        while read lin;
        do
                echo $lin >> ${new_nm}
                if echo $lin | grep -qi '^@data' ;
                then
                        break;
                fi
        done < $2
        echo ${new_nm}" : Metadata for model has been created" | tee  -a  ${LOG_FL}
}


function print_eval_summ 
{
awk  '{ if(strt_flg == 1 && "$1" != "" ) { _n_ = _n_ +1 ;\
x=NF-1; \
if( NF > 1 && $x == "+") { \
_errno_ = _errno_ + 1; \
_error_ = _error_ + $NF; \
_rms_ = _rms_ + $NF*$NF; } } \
else if($1=="inst#") strt_flg=1; \
} END { print "=== Evaluation Summary ==="; \
printf(" Total Number of Instances \t : %16.4f \n Instances Incorrectly Classified: %16.4f \n Mean absolute error \t\t : %16.4f \n Root mean squared error \t : %16.4f \n",_n_,_errno_,_error_/_n_,sqrt(_rms_/_n_));} ' $1

}

# build_model
# function usage: build_model <classifier_name> <input_file> <optional: output_file > 
# This function reads the classifier list to locate the model requested and then calls it build_model_function
function bm_weka_svm
{
# We can allow more flexibility allow optimizing parameters. Links:
# http://weka.sourceforge.net/doc.dev/weka/classifiers/functions/SMO.html
# http://research.microsoft.com/apps/pubs/?id=68391
	p_id=`echo $$`
	m_name=1_`date +%Y%m%d_%H%M_`${p_id}
	java -Xmx1024m -cp ${SRC_DIR}/weka.jar weka.classifiers.functions.SMO -t $1 -no-cv -D   \
	-d ${MODEL_DIR}/${m_name}.mld  >> ${LOG_FL} 2>&1
	if [ ! -f ${MODEL_DIR}/${m_name}.mld ]
	then
		echo "Process has Failed to Create Model"
	else
		echo " ${m_name}.mld has been created for request"  >> ${LOG_FL}
		extract_metadata ${m_name}.mld $1 >> ${LOG_FL}
		#Additional Code Needs to be added to update the model name to Database
	fi
}
function tm_weka_svm
{
# We can allow more flexibility allow optimizing parameters. Links:
# http://weka.sourceforge.net/doc.dev/weka/classifiers/functions/SMO.html
# http://research.microsoft.com/apps/pubs/?id=68391
# ${OP_DIR}/${m_name}.out 
        p_id=`echo $$`
        m_name=`date +%Y%m%d_%H%M_`${p_id}
        java -Xmx512m -cp ${SRC_DIR}/weka.jar weka.classifiers.functions.SMO -l ${MODEL_DIR}/${1} -T $2 -p 0  -i  \
           2>> ${LOG_FL} | tee ${OP_DIR}/${m_name}.out
        if [ ! -f ${OP_DIR}/${m_name}.out ]
        then
                echo "Process has Failed to Generate Predictions"
        else
                echo " ${OP_DIR}/${m_name}.out has been created for given training data" | tee -a ${LOG_FL}
		print_eval_summ ${OP_DIR}/${m_name}.out
                #Additional Code Needs to be added to update the model name to Database
        fi
}

function build_model
{
	_found_=0
	while read class_name;
	do
		c_id=`echo $class_name | cut -d "|" -f 1`
		c_fname=`echo $class_name | cut -d "|" -f 2`
		if [ "${c_id}" == "$1" ]
		then
			echo "FOUND $c_fname for the $c_id requested...evoking function"  >> ${LOG_FL}
			bm_${c_fname} $2
			_found_=1
			break
		fi
	done < ${CONFIG_DIR}/${CLASSIFY_LIST}
	if [ $_found_ == 0 ]
	then
		echo "ERROR : Classifier  Not Found. Please validate the inputs."
		exit 1
	else
		exit 0
	fi
}

function classify_main 
{
	tmp_c_id=`echo $1 | cut -d "_"  -f 1-1`
	tmp_c_nm=` awk -F "|" -v x=$tmp_c_id '{if($1==x)print $2 }' ${CONFIG_DIR}/${CLASSIFY_LIST}`
	if [ "${tmp_c_nm}" == "" ]
	then
		echo "ERROR : Model Name Invalid. Please check Model Naem Provided."
		exit 1
	fi
	echo "Model has been built using Classifier : ${tmp_c_nm}" | tee -a ${LOG_FL}
	echo "Testing..." | tee -a ${LOG_FL}
	tm_${tmp_c_nm} $1 $2
	exit 0
}


#Build Model Function for J48 Tree
#There can be some work done on pruning
#http://weka.sourceforge.net/doc.dev/weka/classifiers/trees/J48.html

function bm_weka_j48
{
	p_id=`echo $$`
        m_name=2_`date +%Y%m%d_%H%M_`${p_id}
        java -Xmx1024m -cp ${SRC_DIR}/weka.jar weka.classifiers.trees.J48 -t $1 -no-cv   \
        -d ${MODEL_DIR}/${m_name}.mld   >> ${LOG_FL} 2>&1
        if [ ! -f ${MODEL_DIR}/${m_name}.mld ]
        then
                echo "Process has Failed to Create Model"
        else
		echo " ${m_name}.mld has been created for request" >> ${LOG_FL}
		extract_metadata ${m_name}.mld $1 >> ${LOG_FL}
	fi
}


function tm_weka_j48
{
        p_id=`echo $$`
        m_name=`date +%Y%m%d_%H%M_`${p_id}
        if [  -f ${MODEL_DIR}/${1} ]
        then
                echo "Model Requested to Prediction Found..Proceeding.."
        else
                echo "ERROR : Requested Model Not Found " | tee -a ${LOG_FL}
        fi
	java -Xmx512m -cp ${SRC_DIR}/weka.jar weka.classifiers.trees.J48 -l ${MODEL_DIR}/${1} -T $2 -p 0  -i  \
 2>> ${LOG_FL} | tee ${OP_DIR}/${m_name}.out

        if [ ! -f ${OP_DIR}/${m_name}.out ]
        then
                echo "Process has Failed to Generate Predictions"
        else
                echo " ${OP_DIR}/${m_name}.out has been created for given training data" | tee -a ${LOG_FL}
                #Additional Code Needs to be added to update the model name to Database
		print_eval_summ ${OP_DIR}/${m_name}.out
        fi

}

#Build Model for Random forest
#http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm
#http://qr.ae/g9O3v : Quora Answer 
function bm_weka_random_forest
{
	 p_id=`echo $$`
        m_name=3_`date +%Y%m%d_%H%M_`${p_id}
        java -Xmx1024m -cp ${SRC_DIR}/weka.jar weka.classifiers.trees.RandomForest -t $1 -D  -no-cv\
         -d ${MODEL_DIR}/${m_name}.mld  >> ${LOG_FL} 2>&1
	if [ ! -f ${MODEL_DIR}/${m_name}.mld ]
        then
                echo "Process has Failed to Create Model"
        else        
		echo " ${m_name}.mld has been created for request" >> ${LOG_FL}
		extract_metadata ${m_name}.mld $1>> ${LOG_FL}
	fi
}

function tm_weka_random_forest
{
        p_id=`echo $$`
        m_name=`date +%Y%m%d_%H%M_`${p_id}
	if [  -f ${MODEL_DIR}/${1} ]
        then
                echo "Model Requested to Prediction Found..Proceeding.."
        else
                echo "ERROR : Requested Model Not Found " | tee -a ${LOG_FL}
        fi
        java -Xmx512m -cp ${SRC_DIR}/weka.jar weka.classifiers.trees.RandomForest -l ${MODEL_DIR}/${1} -T $2 -p 0  -i  \
 2>> ${LOG_FL} | tee ${OP_DIR}/${m_name}.out
        if [ ! -f ${OP_DIR}/${m_name}.out ]
        then
                echo "Process has Failed to Generate Predictions"
        else
                echo " ${OP_DIR}/${m_name}.out has been created for given training data" | tee -a ${LOG_FL}
                #Additional Code Needs to be added to update the model name to Database
		print_eval_summ ${OP_DIR}/${m_name}.out
        fi

}
#Build Model for Naive Bayes
#http://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm
#http://qr.ae/g9O3v : Quora Answer 
function bm_weka_NaiveBayes
{
	 p_id=`echo $$`
        m_name=3_`date +%Y%m%d_%H%M_`${p_id}
        java -Xmx1024m -cp ${SRC_DIR}/weka.jar weka.classifiers.bayes.NaiveBayes -t $1 -D  -no-cv\
         -d ${MODEL_DIR}/${m_name}.mld  >> ${LOG_FL} 2>&1
	if [ ! -f ${MODEL_DIR}/${m_name}.mld ]
        then
                echo "Process has Failed to Create Model"
        else        
		echo " ${m_name}.mld has been created for request" >> ${LOG_FL}
		extract_metadata ${m_name}.mld $1>> ${LOG_FL}
	fi
}

function tm_weka_NaiveBayes
{
        p_id=`echo $$`
        m_name=`date +%Y%m%d_%H%M_`${p_id}
	if [  -f ${MODEL_DIR}/${1} ]
        then
                echo "Model Requested to Prediction Found..Proceeding.."
        else
                echo "ERROR : Requested Model Not Found " | tee -a ${LOG_FL}
        fi
        java -Xmx512m -cp ${SRC_DIR}/weka.jar weka.classifiers.bayes.NaiveBayes -l ${MODEL_DIR}/${1} -T $2 -p 0  -i  \
 2>> ${LOG_FL} | tee ${OP_DIR}/${m_name}.out
        if [ ! -f ${OP_DIR}/${m_name}.out ]
        then
                echo "Process has Failed to Generate Predictions"
        else
                echo " ${OP_DIR}/${m_name}.out has been created for given training data" | tee -a ${LOG_FL}
                #Additional Code Needs to be added to update the model name to Database
		print_eval_summ ${OP_DIR}/${m_name}.out
        fi

}

